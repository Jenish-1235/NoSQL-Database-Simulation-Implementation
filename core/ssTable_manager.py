"""
Class responsible to manage the SSTables generated by whole database service
"""
import datetime
from typing import Dict, Any

from core.file_io_manager import FileIOManager
from schemas.sorted_set_table import SortedSetTable


class SSTableManager:
    def __init__(self):
        self.file_io_manager = FileIOManager()
        self.sst_file = "D:\\HLD-Assignments\\NoSQL-Database-Simulation-Implementation\\persistent-storage\\sst_file.txt"
        self.sst_id_file = r"D:\HLD-Assignments\NoSQL-Database-Simulation-Implementation\persistent-storage\sstable_ids.txt"

    def write_sst(self, sorted_set_table: SortedSetTable):
        sorted_set_table.timestamp = str(datetime.datetime.now())
        self.file_io_manager.writeSS(self.sst_file, sorted_set_table)
        return "Successfully updated SST"

    def retrieve_last_id_from_id_file(self):
        data = self.file_io_manager.openIDFile(self.sst_id_file)
        id_list = []
        for row in data:
            if row != "":
                if row == "\n":
                    continue
                id = row.split(" ")[0]
                id_list.append(id)

        if len(id_list) == 0:
            return None
        return id_list[len(id_list) - 1]

    def write_new_id_in_id_file(self, new_id):
        self.file_io_manager.writeNewSSId(self.sst_id_file, new_id)
        return "Successfully updated SSTID List"
